import { PrismaClient } from '@prisma/client';
import { faker } from '@faker-js/faker';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Starting seed...');

  // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
  await prisma.visit.deleteMany();
  await prisma.patient.deleteMany();

  console.log('üìù Creating 4000 patients...');

  const patients = [];

  // –°–æ–∑–¥–∞–µ–º 4000 –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
  for (let i = 0; i < 4000; i++) {
    const patient = await prisma.patient.create({
      data: {
        firstName: faker.person.firstName(),
        lastName: faker.person.lastName(),
        dateOfBirth: faker.date.between({
          from: new Date('1920-01-01'),
          to: new Date('2010-12-31')
        }),
        phoneNumber: faker.phone.number('+7##########'),
        email: Math.random() > 0.3 ? faker.internet.email() : null, // 70% –∏–º–µ—é—Ç email
      },
    });

    patients.push(patient);

    if (i % 100 === 0) {
      console.log(`Created ${i} patients...`);
    }
  }

  console.log('üè• Creating visits for patients...');

  const statuses = ['SCHEDULED', 'COMPLETED', 'CANCELLED'] as const;
  let totalVisits = 0;

  // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–µ–º –æ—Ç 0 –¥–æ 11 –≤–∏–∑–∏—Ç–æ–≤
  for (let i = 0; i < patients.length; i++) {
    const patient = patients[i];
    const visitsCount = Math.floor(Math.random() * 12); // 0-11 –≤–∏–∑–∏—Ç–æ–≤

    for (let j = 0; j < visitsCount; j++) {
      await prisma.visit.create({
        data: {
          patientId: patient.id,
          visitDate: faker.date.between({
            from: new Date('2020-01-01'),
            to: new Date('2025-12-31')
          }),
          diagnosis: faker.helpers.arrayElement([
            '–û—Å—Ç—Ä–æ–µ —Ä–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä–Ω–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ',
            '–ê—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è –≥–∏–ø–µ—Ä—Ç–µ–Ω–∑–∏—è',
            '–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç 2 —Ç–∏–ø–∞',
            '–û—Å—Ç–µ–æ—Ö–æ–Ω–¥—Ä–æ–∑ –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–∞',
            '–ì–∞—Å—Ç—Ä–∏—Ç',
            '–ë—Ä–æ–Ω—Ö–∏—Ç',
            '–ê–ª–ª–µ—Ä–≥–∏—á–µ—Å–∫–∏–π —Ä–∏–Ω–∏—Ç',
            '–ì–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è',
            '–î–µ–ø—Ä–µ—Å—Å–∏–≤–Ω—ã–π —ç–ø–∏–∑–æ–¥',
            '–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä',
            '–í–∞–∫—Ü–∏–Ω–∞—Ü–∏—è',
            '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ'
          ]),
          treatment: faker.helpers.arrayElement([
            '–ú–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–∑–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è',
            '–§–∏–∑–∏–æ—Ç–µ—Ä–∞–ø–∏—è',
            '–î–∏–µ—Ç–æ—Ç–µ—Ä–∞–ø–∏—è',
            '–õ–µ—á–µ–±–Ω–∞—è —Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–∞',
            '–ù–∞–±–ª—é–¥–µ–Ω–∏–µ',
            '–•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–æ–µ –ª–µ—á–µ–Ω–∏–µ',
            '–ê–Ω—Ç–∏–±–∏–æ—Ç–∏–∫–æ—Ç–µ—Ä–∞–ø–∏—è',
            '–°–∏–º–ø—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–µ—á–µ–Ω–∏–µ',
            '–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
            '–†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è'
          ]),
          status: faker.helpers.arrayElement(statuses),
          notes: Math.random() > 0.5 ? faker.lorem.sentence() : null,
        },
      });

      totalVisits++;
    }

    if (i % 100 === 0) {
      console.log(`Processed ${i} patients, created ${totalVisits} visits...`);
    }
  }

  console.log(`‚úÖ Seed completed!`);
  console.log(`üìä Created ${patients.length} patients and ${totalVisits} visits`);
}

main()
  .catch((e) => {
    console.error('‚ùå Seed failed:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });